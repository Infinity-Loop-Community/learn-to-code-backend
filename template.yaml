AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  learn-to-code-backend

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    ReservedConcurrentExecutions: 1 # Make sure no unexpected costs are created due to an error or unexpected external requests

Parameters:
  StageName:
    Type: String
    Default: dev
    Description: (Required) Enter dev, prod. Default is dev.
    AllowedValues:
      - dev
      - prod
  JwtSecret:
    Type: String
    Default: test

Resources:

  ProdApiCustomDomain:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      DomainName: "api.learn-to-code.io"
      CertificateArn: "arn:aws:acm:us-east-1:127870186360:certificate/1fe844b0-2158-4f2f-835a-c1a5742db254"

  DevApiCustomDomain:
    Type: 'AWS::ApiGateway::DomainName'
    Condition: IsDevelopment
    Properties:
      DomainName: "dev.api.learn-to-code.io"
      CertificateArn: "arn:aws:acm:us-east-1:127870186360:certificate/86e662c1-0a87-4793-8c4e-b84b5a27b1b2"

  ProdApiBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Condition: IsProduction
    Properties:
      DomainName: !Ref ProdApiCustomDomain
      RestApiId: !Ref RestApi
      Stage: prod

  DevApiBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Condition: IsDevelopment
    Properties:
      DomainName: !Ref DevApiCustomDomain
      RestApiId: !Ref RestApi
      Stage: dev

  EventSourcingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${StageName}_events"
      AttributeDefinitions:
        - AttributeName: aggregate_id
          AttributeType: S
        - AttributeName: version
          AttributeType: N
      KeySchema:
        - AttributeName: aggregate_id
          KeyType: HASH
        - AttributeName: version
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  EventSourcingTableReadScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Sub 'table/${EventSourcingTable}'
      RoleARN: !GetAtt AutoscalingRole.Arn
      ScalableDimension: 'dynamodb:table:ReadCapacityUnits'
      ServiceNamespace: dynamodb

  EventSourcingTableReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: 'ReadAutoScalingPolicy'
      PolicyType: 'TargetTrackingScaling'
      ScalingTargetId: !Ref EventSourcingTableReadScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: 'DynamoDBReadCapacityUtilization'
        TargetValue: 70.0

  EventSourcingTableWriteScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Sub 'table/${EventSourcingTable}'
      RoleARN: !GetAtt AutoscalingRole.Arn
      ScalableDimension: 'dynamodb:table:WriteCapacityUnits'
      ServiceNamespace: dynamodb

  EventSourcingTableWriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: 'WriteAutoScalingPolicy'
      PolicyType: 'TargetTrackingScaling'
      ScalingTargetId: !Ref EventSourcingTableWriteScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: 'DynamoDBWriteCapacityUtilization'
        TargetValue: 70.0

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: 'AutoscalingPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:UpdateTable
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:SetAlarmState
                  - cloudwatch:DeleteAlarms
                Resource: '*'

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Cors:
        AllowMethods: "'GET,PUT,POST,DELETE,OPTIONS'"
        AllowHeaders: "'Cookie,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'http://localhost:3000'"
        AllowCredentials: true

  CourseGet:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: cmd/course_get
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /courses/{courseId}
            Method: GET
            RestApiId: !Ref RestApi
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${StageName}"
          JWT_SECRET: !Sub "${JwtSecret}" # More secure would be to use AWS Secret manager with secret rotation. That's postponed to save costs.
          CORS_ALLOW_ORIGIN_URL: !FindInMap [EnvironmentConfig, !Ref StageName, CorsUrl]

  ParticipantPost:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: cmd/participant_post
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /participants/{participantId}/events/
            Method: POST
            RestApiId: !Ref RestApi
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          ENVIRONMENT: !Sub "${StageName}"
          JWT_SECRET: !Sub "${JwtSecret}" # More secure would be to use AWS Secret manager with secret rotation. That's postponed to save costs.
          CORS_ALLOW_ORIGIN_URL: !FindInMap [EnvironmentConfig, !Ref StageName, CorsUrl]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${StageName}_events"

  ParticipantQuizOverviewGet:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: cmd/participant_get/quiz_overview
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /participants/{participantId}/quizzes/
            Method: GET
            RestApiId: !Ref RestApi
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          ENVIRONMENT: !Sub "${StageName}"
          JWT_SECRET: !Sub "${JwtSecret}" # More secure would be to use AWS Secret manager with secret rotation. That's postponed to save costs.
          CORS_ALLOW_ORIGIN_URL: !FindInMap [EnvironmentConfig, !Ref StageName, CorsUrl]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${StageName}_events"

  ParticipantQuizAttemptDetailGet:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: cmd/participant_get/quiz_attempt_detail
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /participants/{participantId}/quizzes/{quizId}/attempts/{attemptId}
            Method: GET
            RestApiId: !Ref RestApi
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          ENVIRONMENT: !Sub "${StageName}"
          JWT_SECRET: !Sub "${JwtSecret}" # More secure would be to use AWS Secret manager with secret rotation. That's postponed to save costs.
          CORS_ALLOW_ORIGIN_URL: !FindInMap [EnvironmentConfig, !Ref StageName, CorsUrl]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${StageName}_events"

Conditions:
  IsProduction:
    Fn::Equals:
      - !Ref StageName
      - "prod"
  IsDevelopment:
    Fn::Equals:
      - !Ref StageName
      - "dev"

Outputs:
  ParticipantPostAPI:
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/participant/events/"
  ParticipantPostARN:
    Value: !GetAtt ParticipantPost.Arn

  CourseGetAPI:
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/courses/{courseId}/"
  CourseGetARN:
    Value: !GetAtt CourseGet.Arn

Mappings:
  EnvironmentConfig:
    dev:
      CorsUrl: "http://localhost:3000"
    prod:
      CorsUrl: "https://www.learn-to-code.io"