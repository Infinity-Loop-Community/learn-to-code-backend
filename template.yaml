AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  learn-to-code-backend

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    ReservedConcurrentExecutions: 5 # Make sure no unexpected costs are created due to an error or unexpected external requests

Parameters:
  StageName:
    Type: String
    Default: dev
    Description: (Required) Enter dev, prod. Default is dev.
    AllowedValues:
      - dev
      - prod
  JwtSecret:
    Type: String
    Default: test
  CorsUrl:
    Type: String
    Default: "https://learn.sebastiansigl.com"

Resources:

  ProdApiCustomDomain:
    Type: 'AWS::ApiGateway::DomainName'
    Condition: IsProduction
    Properties:
      DomainName: "api.learn.sebastiansigl.com"
      CertificateArn: "arn:aws:acm:us-east-1:127870186360:certificate/36e83c64-33ba-4ae3-8295-8867a89507cf"

  DevApiCustomDomain:
    Type: 'AWS::ApiGateway::DomainName'
    Condition: IsDevelopment
    Properties:
      DomainName: "dev.api.learn-to-code.io"
      CertificateArn: "arn:aws:acm:us-east-1:127870186360:certificate/86e662c1-0a87-4793-8c4e-b84b5a27b1b2"

  ProdApiBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Condition: IsProduction
    Properties:
      DomainName: !Ref ProdApiCustomDomain
      RestApiId: !Ref RestApi
      Stage: prod

  DevApiBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Condition: IsDevelopment
    Properties:
      DomainName: !Ref DevApiCustomDomain
      RestApiId: !Ref RestApi
      Stage: dev

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Cors:
        AllowMethods: "'GET,PUT,POST,DELETE,OPTIONS'"
        AllowHeaders: "'Cookie,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: !Sub "'${CorsUrl}'"
        AllowCredentials: true

  CourseGet:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: cmd/course_get
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /courses/{courseId}
            Method: GET
            RestApiId: !Ref RestApi
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${StageName}"
          JWT_SECRET: !Sub "${JwtSecret}" # More secure would be to use AWS Secret manager with secret rotation. That's postponed to save costs.
          CORS_ALLOW_ORIGIN_URL: !Sub "${CorsUrl}"

  ParticipantPost:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: cmd/participant_post
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /participants/{participantId}/events/
            Method: POST
            RestApiId: !Ref RestApi
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          ENVIRONMENT: !Sub "${StageName}"
          JWT_SECRET: !Sub "${JwtSecret}" # More secure would be to use AWS Secret manager with secret rotation. That's postponed to save costs.
          CORS_ALLOW_ORIGIN_URL: !Sub "${CorsUrl}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${StageName}_events"

  ParticipantQuizOverviewGet:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: cmd/participant_get/quiz_overview
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /participants/{participantId}/quizzes/
            Method: GET
            RestApiId: !Ref RestApi
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          ENVIRONMENT: !Sub "${StageName}"
          JWT_SECRET: !Sub "${JwtSecret}" # More secure would be to use AWS Secret manager with secret rotation. That's postponed to save costs.
          CORS_ALLOW_ORIGIN_URL: !Sub "${CorsUrl}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${StageName}_events"

  ParticipantQuizAttemptDetailGet:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: cmd/participant_get/quiz_attempt_detail
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /participants/{participantId}/quizzes/{quizId}/attempts/{attemptId}
            Method: GET
            RestApiId: !Ref RestApi
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          ENVIRONMENT: !Sub "${StageName}"
          JWT_SECRET: !Sub "${JwtSecret}" # More secure would be to use AWS Secret manager with secret rotation. That's postponed to save costs.
          CORS_ALLOW_ORIGIN_URL: !Sub "${CorsUrl}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${StageName}_events"

Conditions:
  IsProduction:
    Fn::Equals:
      - !Ref StageName
      - "prod"
  IsDevelopment:
    Fn::Equals:
      - !Ref StageName
      - "dev"

Outputs:
  ParticipantPostAPI:
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/participant/events/"
  ParticipantPostARN:
    Value: !GetAtt ParticipantPost.Arn

  CourseGetAPI:
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/courses/{courseId}/"
  CourseGetARN:
    Value: !GetAtt CourseGet.Arn
